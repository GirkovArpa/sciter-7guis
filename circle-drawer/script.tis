const canvas = $(#canvas);

const circles = [];
var highlightedCircle = null;

function draw(context) {
  context.strokeWidth(1);
  context.strokeColor(color(0, 0, 0));
  context.fillColor(color(255, 255, 255));
  for (var circle in circles) {
    context.fillColor(circle.color);
    context.drawPath(circle.path);
  }
}

canvas << event click (evt) {
  const path = new Graphics.Path();
  path.arc(evt.x.toFloat(), evt.y.toFloat(), 10.0, 10.0, 10.0);
  const circle = { x: evt.x, y: evt.y, path: path, color: color(255, 255, 255) };
  circles.push(circle);

  canvas.paintContent = draw;
  canvas.refresh();
};

canvas << event mousemove (evt) {
  var oneIsSelected = false;
  for (var circle in circles) {
    if (circle.path.isPointInside(evt.x.toFloat(), evt.y.toFloat()) && !oneIsSelected) {
      circle.color = color(200, 200, 200);
      oneIsSelected = true;
      highlightedCircle = circle;
      canvas.style.set { "context-menu": "selector(menu)" };
    } else {
      circle.color = color(255, 255, 255);
    }
  }
  if (!oneIsSelected) {
    canvas.style.set { "context-menu": "selector(null)" };
  }
  canvas.refresh();
}

$(li) << event click { 
  const popup = view.window({ 
    type: View.TOOL_WINDOW,
    state: View.WINDOW_SHOWN,
    url: 'popup.html',
    parameters: { 
      x: highlightedCircle.x, 
      y: highlightedCircle.y, 
      callback: function() {
        canvas.style.set { "background": "red" };
      }
    },
  });
}