const canvas = $(#canvas);

const stackUndo = [];
const stackRedo = [];

stackUndo.addObserver(function (changeDefinition) {
  $(#undo).state.disabled = stackUndo.length ? false : true;
});

stackRedo.addObserver(function (changeDefinition) {
  $(#redo).state.disabled = stackRedo.length ? false : true;
});

const circles = [];
var highlightedCircle = null;
var currentPopup = null;

function draw(context) {
  context.strokeWidth(1);
  context.strokeColor(color(0, 0, 0));
  context.fillColor(color(255, 255, 255, 0));
  for (var circle in circles) {
    context.fillColor(circle.color);
    context.drawPath(circle.path);
  }
}

canvas << event click (evt) {
  if (currentPopup != null) {
    currentPopup.close();
    currentPopup = null;
    return;
  }

  //stackRedo.length = 0;

  const path = new Graphics.Path();
  const x = evt.x.toFloat();
  const y = evt.y.toFloat();
  path.arc(x, y, 10.0, 10.0, 10.0);
  const circle = { x: x, y: y, radius: 10.0, path: path, color: color(255, 255, 255, 0) };
  circles.push(circle);
  canvas.paintContent = draw;
  canvas.refresh();

  stackUndo.push(function(redo) {
    if (!redo) {
      circles.pop();
      canvas.refresh();
    } else {
      const path = new Graphics.Path();
      path.arc(x, y, 10.0, 10.0, 10.0);
      const circle = { x: x, y: y, radius: 10.0, path: path, color: color(255, 255, 255, 0) };
      circles.push(circle);
      canvas.paintContent = draw;
      canvas.refresh();
    }
  });
};

canvas << event mousemove (evt) {
  if (currentPopup != null) return;
  var oneIsSelected = false;
  for (var circle in circles) {
    if (circle.path.isPointInside(evt.x.toFloat(), evt.y.toFloat()) && !oneIsSelected) {
      circle.color = color(200, 200, 200);
      oneIsSelected = true;
      highlightedCircle = circle;
      canvas.style.set { "context-menu": "selector(menu)" };
    } else {
      circle.color = color(255, 255, 255, 0);
    }
  }
  if (!oneIsSelected) {
    canvas.style.set { "context-menu": "selector(null)" };
  }
  canvas.refresh();
}

$(li) << event click { 
  if (currentPopup != null) return;

  const circle = highlightedCircle;
  const index = circles.indexOf(circle);

  const lastR = circle.radius;

  let newR = 0;

  currentPopup = view.window({ 
    type: View.TOOL_WINDOW,
    state: View.WINDOW_SHOWN,
    url: 'popup.html',
    parameters: { 
      x: circle.x, 
      y: circle.y, 
      callback: function(sliderValue) {
        const val = sliderValue.toFloat();
        const path = new Graphics.Path();
        path.arc(circle.x, circle.y, val, val, val);
        circle.path = path;
        circle.radius = val;
        newR = val;
        canvas.refresh();
      }
    },
  });
  currentPopup.on("close", function() {
    currentPopup = null;
    stackUndo.push(function (redo) {
      if (!redo) {
        const _circle = circles[index];
        const path = new Graphics.Path();
        path.arc(_circle.x, _circle.y, lastR, lastR, lastR);
        _circle.path = path;
        _circle.radius = lastR;
        canvas.refresh();
      } else {
        const _circle = circles[index];
        const path = new Graphics.Path();
        path.arc(_circle.x, _circle.y, newR, newR, newR);
        _circle.path = path;
        _circle.radius = newR;
        canvas.refresh();
      }
    });

  });
  canvas.style.set { "context-menu": "selector(null)" };

}

$(#undo) << event click {
  const func = stackUndo.pop();
  func(false);
  stackRedo.push(func);
}

$(#redo) << event click {
  const func = stackRedo.pop();
  func(true);
  stackUndo.push(func);
}
